generiere einen Onclick (i) Funtion mit folgendem Stand des Projekts: 

HTML-datei:

    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TIC-TAC-TOE</title>
    <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="style/style.css">
    <link rel="stylesheet" href="assets/fonts/fonts.css">
</head>
<body class="p-3 mb-2 bg-black text-white" onload="init()">
    <div class="container p-3 mb-2 bg-black text-white textAlignCenter">
        <h1 class="h1Size">TIC-TAC-TOE</h1>
            <div class="container text-center width720">
                <div class="row row-cols-3">
                    <div  id="0"></div>
                    <div  id="1"></div>
                    <div  id="2"></div>
                    <div  id="3"></div>
                    <div  id="4"></div>
                    <div  id="5"></div>
                    <div  id="6"></div>
                    <div  id="7"></div>
                    <div  id="8"></div>
                </div>
            </div>
    </div>


    
</body>
<script src="script/script.js"></script>
<script src="script/database.js"></script>
<script src="script/template.js"></script>
<script src="script/render.js"></script>
</html>

CSS-Datei:

.textAlignCenter {
    text-align: center;
}
.h1Size {
    font-size: 72px;
    margin-block-start: 0;
    margin-block-end: 0;
}
.bottom {
    border-bottom: 5px solid white;
}
.top {
    border-top: 5px solid white;
}
.right {
    border-right: 5px solid white;
}
.left {
    border-left: 5px solid white;
}
.columnHeight {
    height: 120px;
}
.col{
    display: flex;
    align-items: center;
    justify-content: center;
}
.col:hover {
    cursor: pointer;
    background-color: rgba(255, 255, 255, 0.5);
}
.width720 {
    max-width: 640px;
}

Javascript-Datei 01 (script.js):

function init() {
    render();
}

Javascript-Datei 02 (render.js):

function render() {
    // Hole den Container, der die Zellen enthält
    const contentDiv = document.querySelector('.row-cols-3');

    // Erstelle die Tabelle (Zellen)
    let html = '';
    for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        let cellContent = '';

        if (field === 'circle') {
            cellContent = generateCircleSVG();
        } else if (field === 'cross') {
            cellContent = generateCrossSVG();
        }
        
        // Füge die entsprechende Klasse für die Ränder hinzu, basierend auf der Zellposition
        const colClasses = ['col'];
        if (i < 6) colClasses.push('bottom');
        if (i % 3 === 0 || i % 3 === 1) colClasses.push('right');
        if ([0, 3, 6].includes(i)) colClasses.push('columnHeight');


        // Hinweis: Die Klassen `left`, `top` aus deiner CSS sind hier nicht notwendig,
        // da `right` und `bottom` ausreichen, um das Gitter zu erstellen.
        
        html += `<div class="${colClasses.join(' ')}" id="${i}">${cellContent}</div>`;
    }

    // Setze den generierten HTML-Code in den Container
    contentDiv.innerHTML = html;
}

// Optional: Teste die Funktion, indem du das 'fields'-Array änderst und render() aufrufst
// fields[0] = 'circle';
// fields[1] = 'cross';
// fields[4] = 'circle';

// render(); // Rufe die Funktion auf, um das Spielfeld initial zu zeichnen.

Javascript-Datei 03 (template.js):

function generateCircleSVG() {
    const svgCode = `
        <svg width="70" height="70" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
            <circle cx="50" cy="50" r="40" stroke="#00B0EF" stroke-width="10" fill="none">
                <animate attributeName="stroke-dasharray" from="0, 251.2" to="251.2, 0" dur="200ms" />
            </circle>
        </svg>
    `;
    return svgCode.trim();
}

/**
 * Generiert den SVG-Code für ein animiertes Kreuz.
 * @returns {string} - Der HTML-String für das Kreuz-SVG.
 */

function generateCrossSVG() {
    const svgCode = `
        <svg width="70" height="70" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
            <line x1="15" y1="15" x2="85" y2="85" stroke="#FFC000" stroke-width="10" stroke-linecap="round">
                 <animate attributeName="stroke-dasharray" from="0, 99" to="99, 0" dur="200ms" />
            </line>
            <line x1="85" y1="15" x2="15" y2="85" stroke="#FFC000" stroke-width="10" stroke-linecap="round">
                 <animate attributeName="stroke-dasharray" from="0, 99" to="99, 0" dur="200ms" />
            </line>
        </svg>
    `;
    return svgCode.trim();
}


Javascript-Datei 04 (database.js):

let fields = [
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
];

diese Funktion soll folgende Eigenschaften und Arbeitsablauf beinhalten:

1. zuerst wird abgefragt mit 2 SVG als icon ob ich cross oder circle in den jeweiligen id = i einfügen wollte.
    diese beide Icons soll zwischen h1 und dem DIV-Container mit der Klasse : 'class="container text-center width720'
    in einem DIV-Container dargestellt werden.

2. wenn die Abfrage erfolgreich ist, soll entsprechender String in der Array fields[i], umgesetzt werden

Antwort und Erklärung:

    HTML: Es gibt jetzt spezielle Bereiche für die Spieleranzeige und den Endbildschirm.
    database.js: Speichert nun auch, wer am Zug ist (currentPlayerSymbol) und ob das Spiel vorbei ist (gameOver).
    script.js: Enthält die gesamte Spiellogik:
    handleCellClick(i): Wird ausgeführt, wenn du eine Zelle anklickst. Es prüft, ob der Zug gültig ist, trägt das Symbol ein, wechselt den Spieler und ruft die Gewinnprüfung auf.
    checkWinner(): Prüft nach jedem Zug, ob jemand gewonnen hat oder ob es unentschieden steht.
    showEndScreen() / restartGame(): Steuern das Spielende und den Neustart.
    render.js: Wurde angepasst, um jeder Zelle den onclick-Event-Handler hinzuzufügen und die neue Anzeige für den aktuellen Spieler zu aktualisieren.